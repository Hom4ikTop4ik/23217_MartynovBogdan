-- da
import Control.Monad.State


-- TASK 1

-- –æ—Ç ChatGPT
-- -- | –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
-- type FactState = (Int, Int)

-- -- | –ú–æ–Ω–∞–¥–∞ State –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞
-- fact' :: State FactState Int
-- fact' = do
--   -- –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –∏ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
--   (step, acc) <- get

--   -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —à–∞–≥ —Ä–∞–≤–µ–Ω 0, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä
--   if step == 0
--     then return acc
--     else do
--       -- –£–º–µ–Ω—å—à–∞–µ–º —à–∞–≥ –Ω–∞ 1
--       let newStep = step - 1

--       -- –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º —à–∞–≥–æ–º
--       put (newStep, acc * step)

--       -- –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º fact'
--       fact'

fact' :: State (Int, Int) Int
fact' = do
    --                –µ—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å step –≤–º–µ—Å—Ç–æ step-1, –≤ –∫–æ–Ω—Ü–µ —É–º–Ω–æ–∂–∏—Ç—å—Å—è –Ω–∞ 0
    (step, answer)   <- state $ \(step, acc) -> ((step-1, acc), (step-1, acc*step))

    -- "<="  if user isn't smartüòÅ and puts negative number into the func
    if step <= 0 
        then return answer
        else do
            fact'

fact :: Int -> Int
fact n = evalState fact' (n, 1)



-- TASK 2 (—Å–¥–µ–ª–∞–ª —Å–∞–º, –Ω–∞ –æ—Å–Ω–æ–≤–µ TASK 1)
-- (step, n1, n2)
fibb' :: State (Int, Int, Int) Int
fibb' = do
    (step, a, b) <- state $ \(step, a1, a2) -> ((step, a1, a2), (step-1, a2, a1+a2))
    -- a    <- state $ \(step, a1, a2) -> (  a1, (step,   a1, a2))
    -- b    <- state $ \(step, a1, a2) -> (  a2, (step,   a1, a2))
    -- step <- state $ \(step, a1, a2) -> (step, (step-1, a2, a1+a2))

    -- "<"   if user isn't smartüòÅ and puts negative number into the func
    if step < 0 
        then return (-1)
        else
            if step == 0
                then return b
                else do
                    fibb'


fibb :: Int -> Int
fibb n = evalState fibb' (n, 1, 0)

-- –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–µ–ª:
da = [0,1,2,3,4,5,6,7,8,9]
ne :: [Int]
ne = foldl (\acc x -> acc ++ [fibb x]) [] da



-- TASK 3
data BinTree a =
    Nil |
    -- Node (BinTree a) a (BinTree a) 
    Node {
        left :: BinTree a,
        value :: a,
        right :: BinTree a
    }

-- –í–∞—à –≤—ã–≤–æ–¥ –∏–∑ 10 —Å–µ–º–∏–Ω–∞—Ä–∞ 1-–æ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞
instance Show a => Show (BinTree a) where
    show :: Show a => BinTree a -> String
    show = show0 0 where
        show0 _ Nil = "Nil"
        show0 lvl Node{left=l, right=r, value=v} =
            "Node (v = " ++ show v ++ ")\n" ++
            replicate lvl '\t' ++ "l=" ++ show0 (lvl+1) l ++ "\n" ++
            replicate lvl '\t' ++ "r=" ++ show0 (lvl+1) r ++ "\n"
            -- replicate lvl '\t' ‚Äî –ø–µ—á–∞—Ç–∞–µ—Ç lvl —Ä–∞–∑ —Å–∏–º–≤–æ–ª '\t'

numberTree' :: BinTree () -> State Integer (BinTree Integer)
numberTree' Nil = return Nil
numberTree' (Node left cur right) = do
    -- —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –ª–µ–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ
    l <- numberTree' left
    -- –ø–µ—Ä–µ–¥–∞—Ç—å num, –ø–æ—Å–ª–µ —á–µ–≥–æ —É–≤–µ–ª–∏—á–∏—Ç—å –µ–≥–æ
    c <- state $ \(num) -> (num, num+1)
    -- —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ
    r <- numberTree' right
    -- –≤–µ—Ä–Ω—É–ª–∏ "—Å–∫–ª–µ–µ–Ω–æ–µ" –¥–µ—Ä–µ–≤–æ: –ª–µ–≤–∞—è –≤–µ—Ç–∫–∞, –æ—Å–Ω–æ–≤–∞–Ω–∏–µ, –ø—Ä–∞–≤–∞—è –≤–µ—Ç–∫–∞
    return (Node l c r)

numberTree :: BinTree () -> BinTree Integer
numberTree tree = evalState (numberTree' tree) 0 -- –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å 0, –º—ã –≤–µ–¥—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã
